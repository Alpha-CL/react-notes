///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


import React from "react";
import ReactDOM from "react-dom";
import {App} from "./App"


//-------------------------------------------------------------------------------------------------------------------//


/**
 * React.StrictMode             // 本质是一个组件，该组件不尽兴 UI 渲染( React.Fragment )
 *
 *
 * 在渲染内部组件时，检查是否有不符合当前规范的代码
 *
 *
 * 1) 检测不安全的生命周期函数 Hooks
 *
 * 2) 检测 Ref_API( eg: ref={str}; )的警告
 *
 * 3) 使用废弃或遗留的 API( eg: findDOMNode(), context_api )
 *
 * 4) 检测在危险的方法中使用副作用的方法: 异步处理, 改变参数值, setSetate(), 本地存储, 改变函数外的变量
 *
 *    - React 要求，副作用代码仅可出现在以下生命周期函数中
 *
 *      * ComponentDidMount();
 *
 *      * ComponentDidUpdate();
 *
 *      * ComponentWillUnMount();
 *
 *
 ** 在严格模式下，虽然不能监控到具体的副作用代码，但它会将不能具有副作用的函数调用两遍，以便发现问题( 仅在开发模式中有效 )
 */


//-------------------------------------------------------------------------------------------------------------------//


const root = document.getElementById('root');


ReactDOM.render(
    (
        <React.StrictMode>
            <App/>
        </React.StrictMode>
    )
    , root);


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
